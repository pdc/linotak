{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "App.svelte"
  ],
  "sourcesContent": [
    "<script>\n  import { onMount } from \"svelte\";\n\n  export let src;\n  export let width;\n  export let height;\n  export let label;\n  export let focusX = 0.5;\n  export let focusY = 0.5;\n\n  const r = 32; // Size of target circle.\n\n  let image;\n  let numbersDiv;\n\n  // Size of Ooble crop preview.\n  $: [cropWidth, cropHeight] = cropSize(1.0, width, height);\n  let cropX, cropY;\n  $: cropX = focusX * (width - cropWidth) + 0.5;\n  $: cropY = focusY * (height - cropHeight) + 0.5;\n\n  // Mastodon has a different way to determine the crop rectangle.\n  $: [mastoWidth, mastoHeight] = cropSize(16.0 / 9.0, width, height);\n  let mastoX, mastoY;\n  $: if (mastoWidth === width) {\n    mastoX = 0;\n    mastoY = Math.min(\n      height - mastoHeight,\n      Math.max(0, focusY * height - 0.5 * mastoHeight)\n    );\n  } else {\n    mastoX = Math.min(\n      width - mastoWidth,\n      Math.max(0, focusX * width - 0.5 * mastoWidth)\n    );\n    mastoY = 0;\n  }\n\n  /**\n   * Calculate dimensions of crop rectangle.\n   */\n  function cropSize(ratio, width, height) {\n    return width > height * ratio\n      ? [height * ratio, height]\n      : [width, width / ratio];\n  }\n\n  onMount(() => {\n    const availableWidth = document.documentElement.clientWidth;\n    const availableHeight = document.documentElement.clientHeight - numbersDiv.clientHeight;\n    if (width > availableWidth || height > availableHeight) {\n      // Scale down to fit.\n      if (width / height < availableWidth / availableHeight) {\n        width *= availableHeight / height;\n        height = availableHeight;\n      } else {\n        height *= availableWidth / width;\n        width = availableWidth;\n      }\n    }\n  });\n\n  function handleMouseDown(e) {\n    const { left, top } = image.getBoundingClientRect();\n    const dX = e.clientX - left - focusX * width;\n    const dY = e.clientY - top - focusY * height;\n    if (dX * dX + dY * dY <= r * r) {\n      // It it inside the focus circle?\n      e.preventDefault();\n      const handleMousemove = (e) => {\n        const { left, top } = image.getBoundingClientRect();\n        focusX = Math.max(Math.min(1, (e.clientX - left - dX) / width), 0);\n        focusY = Math.max(Math.min(1, (e.clientY - top - dY) / height), 0);\n      };\n      const handleMouseUp = (e) => {\n        e.target.removeEventListener(\"mousemove\", handleMousemove);\n        e.target.removeEventListener(\"mouseup\", handleMouseUp);\n      };\n\n      e.target.addEventListener(\"mousemove\", handleMousemove);\n      e.target.addEventListener(\"mouseup\", handleMouseUp);\n    }\n  }\n</script>\n\n<style>\n  main {\n    height: 100vh;\n    display: grid;\n    grid-template-rows: max-content 1fr;\n  }\n\n  @media (min-width: 640px) {\n    main {\n      max-width: none;\n    }\n  }\n</style>\n\n<div class=\"focus-editor\">\n  <svg\n    class=\"im\"\n    {width}\n    {height}\n    viewBox=\"0 0 {width} {height}\"\n    on:mousedown={handleMouseDown}>\n    <image xlink:href={src} {width} {height} bind:this={image} />\n    <circle\n      cx={focusX * width}\n      cy={focusY * height}\n      r={32}\n      stroke-width=\"1\"\n      stroke=\"#B0A\"\n      fill=\"none\" />\n    <rect\n      x={mastoX + 0.5}\n      y={mastoY + 0.5}\n      width={mastoWidth - 1}\n      height={mastoHeight - 1}\n      stroke-width=\"1\"\n      stroke=\"#F56\"\n      fill=\"none\" />\n    <rect\n      x={cropX + 0.5}\n      y={cropY + 0.5}\n      width={cropWidth - 1}\n      height={cropHeight - 1}\n      stroke-width=\"1\"\n      stroke=\"#0BA\"\n      fill=\"none\" />\n  </svg>\n  <div bind:this={numbersDiv}>\n    {#if label}<label for=\"id_focus_x\">{label}</label>{/if}\n    <input\n      name=\"focus_x\"\n      id=\"id_focus_x\"\n      bind:value={focusX}\n      type=\"number\"\n      step=\"any\"\n      required />\n    <input\n\t  name=\"focus_y\"\n\t  id=\"id_focus_y\"\n      bind:value={focusY}\n      type=\"number\"\n      step=\"any\"\n      required />\n  </div>\n</div>\n"
  ],
  "names": [],
  "mappings": "AA4FE,MAAM,AAAC,YAAY,KAAK,CAAC,AAAC,CAAC,AAI3B,CAAC"
}